import streamlit as st
import pandas as pd
import os
import json
import datetime
import plotly.express as px
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from openai import OpenAI

# Cria√ß√£o do cliente OpenAI com chave vinda do secrets.toml (ou st.secrets)
client = OpenAI(api_key=st.secrets["openai_api_key"])

# Nome do arquivo CSV onde os dados ser√£o armazenados
HISTORICO_FILE = "historico_avaliacoes.csv"

# Criar sess√£o para armazenar estado da tela e login do usu√°rio
if "tela_login" not in st.session_state:
    st.session_state.tela_login = False
if "usuario_logado" not in st.session_state:
    st.session_state.usuario_logado = None  # Armazena o e-mail do usu√°rio logado

# Fun√ß√£o para salvar os dados na planilha
google_creds = json.loads(st.secrets["GOOGLE_CREDENTIALS"])

GOOGLE_SHEET_NAME = "historico_avaliacoes"

#Salvar respostas
def salvar_respostas(dados):
    dados["Data"] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_dict(google_creds, scope)
    gspread_client = gspread.authorize(creds)  # <- corrigido aqui

    try:
        sheet = gspread_client.open(GOOGLE_SHEET_NAME).sheet1
    except Exception as e:
        st.error(f"Erro ao acessar planilha: {e}")
        return

    valores = list(dados.values())

    try:
        sheet.append_row(valores)
    except Exception as e:
        st.error(f"Erro ao salvar dados na planilha: {e}")

    novo_dado = pd.DataFrame([dados])

    if os.path.exists(HISTORICO_FILE):
        df = pd.read_csv(HISTORICO_FILE)
        df = pd.concat([df, novo_dado], ignore_index=True)
    else:
        df = novo_dado

    df = df[list(dados.keys())]
    df.to_csv(HISTORICO_FILE, index=False)

# Fun√ß√£o para gerar feedback com IA
def analisar_respostas(respostas):
    mensagem = "Considere que voc√™ √© um coach especializado em compet√™ncias socioemocionais. Analise as respostas abaixo e forne√ßa um feedback personalizado e construtivo:\n\n"

    for pergunta, nota in respostas.items():
        mensagem += f"- {pergunta}: nota {nota}\n"

    response = client.responses.create(
        model="gpt-4",
        input=mensagem
    )

    # Compat√≠vel com o novo SDK
    print(response.output_text)

    if st.button("Analisar respostas"):
        feedback = analisar_respostas(perguntas)
    
    except RateLimitError:
        st.error("Limite da API da OpenAI atingido. Tente novamente em alguns instantes.")

def carregar_dados():
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEET_CRED_PATH, scope)
    gspread_client = gspread.authorize(creds)
    sheet = gspread_client.open(GOOGLE_SHEET_NAME).sheet1
    data = sheet.get_all_records()
    return pd.DataFrame(data)


# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Avalia√ß√£o Socioemocional SENAI", layout="wide")

# Header com bot√£o de acesso
col1, col2 = st.columns([8, 2])
with col2:
    if not st.session_state.usuario_logado:
        if st.button("üîê Acessar √Årea Restrita"):
            st.session_state.tela_login = True

# üîí **TELA DE LOGIN**
if st.session_state.tela_login and not st.session_state.usuario_logado:
    st.title("üîí √Årea Restrita")

    email = st.text_input("E-mail:")
    senha = st.text_input("Senha:", type="password")

    EMAILS_AUTORIZADOS = {"laise.pedroso@senaicni.com.br", "lleao@senaicni.com.br"}

    def validar_email(email):
        return email.strip().lower() in EMAILS_AUTORIZADOS


    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîë Entrar"):
            if senha == "minhasenha123" and validar_email(email):
                st.success(f"Bem-vindo, {email.split('@')[0].capitalize()}!")
                st.session_state.usuario_logado = email
                st.session_state.tela_login = False
                st.rerun()
            else:
                if not validar_email(email):
                    st.error("Apenas os e-mails autorizados podem acessar.")
                elif senha != "minhasenha123":
                    st.error("Senha incorreta. Tente novamente.")

    with col2:
        if st.button("‚ùå Voltar"):
            st.session_state.tela_login = False
            st.rerun()

    st.stop()

# SE√á√ÉO DE √ÅREA RESTRITA PARA GESTORES
if st.session_state.usuario_logado:
    st.title("üìä Relat√≥rio de Avalia√ß√µes")
    
    if os.path.exists(HISTORICO_FILE):
        try:
            df_historico = carregar_dados()
            if df_historico.empty:
                st.warning("Nenhuma avalia√ß√£o registrada at√© o momento.")
            else:
                st.dataframe(df_historico)
        except Exception as e:
            st.error(f"Erro ao carregar os dados: {e}")

    
    if st.button("üö™ Sair"):
        st.session_state.usuario_logado = None
        st.rerun()
    st.stop()

# TELA PRINCIPAL
st.title("Avalia√ß√£o de Capacidades Socioemocionais")

st.markdown("""
### **Sobre esta Avalia√ß√£o**
Este formul√°rio tem como objetivo avaliar **capacidades socioemocionais**, com foco na **Intelig√™ncia Emocional**.  
As respostas ser√£o analisadas para ajudar no crescimento profissional da equipe.
""")

# Divis√£o do layout: Formul√°rio na esquerda, gr√°ficos na direita
col_form, col_graficos = st.columns([1, 1])

with col_form:
    nome_avaliador = st.text_input("Digite seu nome completo:", value="", placeholder="Nome completo obrigat√≥rio").strip()
    email_colaborador = st.text_input("Digite seu e-mail SENAI:", value="", placeholder="E-mail obrigat√≥rio").strip()
    tipo_avaliacao = st.selectbox("Selecione o tipo de avalia√ß√£o", ["Autoavalia√ß√£o", "Avalia√ß√£o do Gestor", "Avalia√ß√£o de Pares"])
    
    # Lista de nomes dispon√≠veis para a Avalia√ß√£o de Pares
    lista_nomes = [
        "Ana Maria Sousa da Silva",
        "Anderson Garcia Scarlassara",
        "Anna Christina Theodora Aun de Azevedo Nascimento",
        "Brenda Kamilly da Silva Alves",
        "Bruno Silveira Duarte",
        "Cyro Visgueiro Maciel",
        "Decio Campos da Silva",
        "Elisie Coelho Lima",
        "Fabio Lima de Deus",
        "Flavio Oscar Hahn",
        "Frankwaine Pereira de Melo",
        "Germana Arcoverde Bezerra Zapata",
        "Giseli Almeida de Araujo",
        "Hugo Nakatani",
        "Jeferson Leandro Mateucci",
        "Juliana Gavini Uliana Pappetti",
        "Laise Caldeira Pedroso",
        "Lucas de Freitas Sousa",
        "Luis Alberto Silva Monti",
        "Monica de Castro Mariano Carneiro",
        "Natalia Schultz de Souza",
        "Nelson Massaia Borsi Junior",
        "Rosamaria Capo Sobral",
        "Tricia Miranda Araujo"
    ]

    # Se√ß√£o de sele√ß√£o do nome do avaliado
    if tipo_avaliacao == "Avalia√ß√£o de Pares":
        nome_avaliado = st.selectbox("Selecione o colaborador avaliado:", lista_nomes)
    elif tipo_avaliacao == "Avalia√ß√£o do Gestor":
        nome_avaliado = "Luiz Eduardo Le√£o"  # Nome fixo para avalia√ß√£o do gestor
    else:
        nome_avaliado = nome_avaliador  # Na autoavalia√ß√£o, o pr√≥prio avaliador √© o avaliado


    # Defini√ß√£o das descri√ß√µes din√¢micas para cada n√≠vel (1 a 4)
    descricoes_niveis = {
        "1. Expressar opini√µes divergentes de forma construtiva": {
            1: "Reconhece opini√µes divergentes.",
            2: "Expressa opini√µes divergentes de forma construtiva, de maneira franca e respeitosa.",
            3: "Expressa opini√µes divergentes de forma construtiva, de maneira franca e respeitosa, n√£o se intimidando em posicionar-se.",
            4: "Acolhe e expressa opini√µes divergentes de forma construtiva, de maneira franca e respeitosa, n√£o se intimidando em posicionar-se."
        },
        "2. Comunicar de forma objetiva e clara": {
            1: "Comunica-se pouco de forma objetiva, simples e clara.",
            2: "Comunica-se de forma objetiva, simples e clara, muitas vezes adequando sua linguagem aos diferentes p√∫blicos.",
            3: "Comunica-se de forma objetiva, simples e clara, adequando sua linguagem aos diferentes p√∫blicos e checando o entendimento das pessoas.",
            4: "Sempre se comunica de forma objetiva, simples e clara, adequando sua linguagem aos diferentes p√∫blicos, checando o entendimento das pessoas e sendo uma refer√™ncia para o grupo."
        },
        "3. Trabalhar de forma colaborativa": {
            1: "Trabalha pouco de forma colaborativa em atividades que envolvem diferentes √°reas ou pessoas.",
            2: "Trabalha em algumas situa√ß√µes de forma colaborativa em atividades que envolvem diferentes √°reas ou pessoas.",
            3: "Trabalha de forma colaborativa em atividades que envolvem diferentes √°reas ou pessoas.",
            4: "Incentiva e trabalha sempre de forma colaborativa em atividades que envolvem diferentes √°reas ou pessoas."
        },
        "4. Resolver problemas e dar devolutivas construtivas": {
            1: "Identifica problemas.",
            2: "Compreende problemas e pensa em algumas devolutivas de maneira construtiva.",
            3: "Resolve problemas e d√° devolutivas de maneira construtiva.",
            4: "Identifica e resolve problemas, aplicando solu√ß√µes de maneira construtiva."
        },
        "5. Adaptabilidade a mudan√ßas e novos ambientes": {
            1: "Adapta-se pouco a diferentes grupos e ambientes.",
            2: "√â capaz de se adaptar a diferentes grupos e ambientes, lidando bem com mudan√ßas e situa√ß√µes novas.",
            3: "√â capaz de se adaptar a diferentes grupos e ambientes, lidando razoavelmente bem com mudan√ßas e situa√ß√µes novas.",
            4: "Adapta-se muito bem a diferentes grupos e ambientes, lidando bem com mudan√ßas e situa√ß√µes novas dos seus colegas e da empresa."
        },
        "6. Abertura a feedback e aprendizado cont√≠nuo": {
            1: "Est√° pouco aberto a feedback.",
            2: "Est√° aberto em situa√ß√µes pontuais a feedback e busca algumas vezes aprendizados para alavancar seu crescimento profissional e do grupo.",
            3: "Est√° aberto a feedback e busca novos aprendizados para alavancar seu crescimento pessoal, desempenho profissional e do grupo.",
            4: "Est√° sempre aberto a feedback, buscando novos aprendizados para alavancar seu crescimento pessoal, desempenho profissional e do grupo."
        }
}

    # Exibi√ß√£o dos sliders com tooltips din√¢micos
    st.write("### üéØ **Avalie cada capacidade de 1 a 4. As capacidades avaliadas contemplam as compet√™ncias Lideran√ßa e Influ√™ncia Social e Habilidades de Relacionamento.**")
    st.write("1 - Abaixo do b√°sico | 2 - B√°sico | 3 - Adequado | 4 - Avan√ßado")

    # Exibi√ß√£o dos sliders com tooltips din√¢micos
    perguntas = {}
    for pergunta, descricao in descricoes_niveis.items():
        # Criar um cont√™iner com borda e espa√ßamento para cada pergunta
        with st.container():
            st.markdown(
                f"""
                <div style="
                    border: 1px solid #ddd;
                    border-radius: 8px;
                    padding: 15px;
                    margin-bottom: 5px;">
                    <p style="font-size:18px; font-weight:bold; margin-bottom:5px;">{pergunta}</p>
                    <div style="padding: 5px 0px;">
                """, unsafe_allow_html=True
            )

            # Criar o slider dentro do bloco
            nota = st.slider(pergunta, 1, 4, 2, key=f"slider_{pergunta}", label_visibility="hidden")
            perguntas[pergunta] = nota

            # Fechar a div e exibir tooltip alinhado
            st.markdown(
                f"""
                    </div>
                    <p style="font-size:14px; color:gray; margin-top:15px; text-align:left;">
                        <span style="color:#3498db;">‚ÑπÔ∏è</span> {descricoes_niveis[pergunta][nota]}
                    </p>
            </div>
                """, unsafe_allow_html=True
            )

    if st.button("üì© Enviar Respostas"):
        dados = {
            "E-mail do Colaborador": email_colaborador,
            "Nome do Avaliador": nome_avaliador,
            "Tipo de Avalia√ß√£o": tipo_avaliacao,
            "Nome do Avaliado": nome_avaliado,
            "Data": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            **perguntas
        }
        salvar_respostas(dados)

        feedback = analisar_respostas(perguntas)
        st.success("‚úÖ Respostas registradas com sucesso!")
        st.markdown("### üí¨ Feedback gerado pela IA:")
        st.info(feedback)

        st.session_state["respostas_enviadas"] = False



with col_graficos:
    if os.path.exists(HISTORICO_FILE):
        st.subheader("üìä Seu Hist√≥rico de Avalia√ß√µes")

        df_historico = pd.read_csv(HISTORICO_FILE)
        email_colaborador = email_colaborador.strip().lower()

        if "E-mail do Colaborador" in df_historico.columns:
            df_historico["E-mail do Colaborador"] = df_historico["E-mail do Colaborador"].astype(str).str.strip().str.lower()
            df_filtrado = df_historico[df_historico["E-mail do Colaborador"] == email_colaborador]


            if df_filtrado.empty:
                st.warning("Voc√™ precisa preencher os campos obrigat√≥rios.")
            else:
                st.write("üìà **Evolu√ß√£o das Capacidades ao Longo do Tempo**")

                col1, col2 = st.columns(2)  # Criando duas colunas para exibi√ß√£o dos gr√°ficos lado a lado
                
                # Criar uma lista das perguntas
                lista_perguntas = list(perguntas.keys())
                
                import plotly.graph_objects as go

                # Criar gr√°ficos organizados em pares com a cor #E94C4F e borda ao redor
                col1, col2 = st.columns(2)
                lista_perguntas = list(perguntas.keys())

                for i in range(0, len(lista_perguntas), 2):
                    with col1:
                        if i < len(lista_perguntas):
                            with st.container():
                                st.markdown(
                                    f"""
                                    <div style="border: 1px solid #ddd; border-radius: 8px; padding: 10px; box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);">
                                        <b>{lista_perguntas[i]}</b>
                                    </div>
                                    """,
                                    unsafe_allow_html=True
                                )
                                fig1 = go.Figure()
                                fig1.add_trace(go.Scatter(
                                    x=df_filtrado["Data"],
                                    y=df_filtrado[lista_perguntas[i]],
                                    mode="lines+markers",
                                    line=dict(color="#E94C4F", width=3),  # Cor personalizada
                                ))
                                fig1.update_layout(template="plotly_white", margin=dict(l=20, r=20, t=40, b=20))
                                st.plotly_chart(fig1, use_container_width=True, key=f"grafico_{lista_perguntas[i]}")

                    with col2:
                        if i + 1 < len(lista_perguntas):
                            with st.container():
                                st.markdown(
                                    f"""
                                    <div style="border: 1px solid #ddd; border-radius: 8px; padding: 10px; box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);">
                                        <b>{lista_perguntas[i + 1]}</b>
                                    </div>
                                    """,
                                    unsafe_allow_html=True
                                )
                                fig2 = go.Figure()
                                fig2.add_trace(go.Scatter(
                                    x=df_filtrado["Data"],
                                    y=df_filtrado[lista_perguntas[i + 1]],
                                    mode="lines+markers",
                                    line=dict(color="#E94C4F", width=3),  # Cor personalizada
                                    marker=dict(color="#E94C4F")
                                ))
                                fig2.update_layout(template="plotly_white", margin=dict(l=20, r=20, t=40, b=20))
                            st.plotly_chart(fig2, use_container_width=True, key=f"grafico_{lista_perguntas[i+1]}")
